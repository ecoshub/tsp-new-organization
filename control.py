from brute_force_improved import brute_force_method as bm
from new_triangulation_method import triangulation_method as tm
# from mean_angle_elemination_method import mean_angle_elemination_method as ma
# from angle_elimination_method import angle_elimination_method as em
# from new_angle_elimination_method import new_angle_elimination_method as new
# import mesurement_tools as mesure
# import plot_tools as pt
# import point_creation as pc


# n=10, ss=100, s=300, 847
# n=10, ss=100, s=102, 634 mean angle

'''
# n=10, ss=100, s=0 angle=60 angle elemination angle
12  34  53  56  63  93  110 119 154 156 164 187 220 227 249 344 422 431 451 470 486 494 514 540 554 569
580 597 603 624 631 662 664 709 717 728 799 829 885 888 897 912 921 927 938 945 957 985 997 998

# n=10, ss=100, s=0 angle=30 angle elemination angle
300, 847


# n=10, ss=10, angle=60 new
12 34 43 48 56 58 63 93 102 103 110 119...
'''

'''
10,100
max area 43
19 292.015245243395 290.8508141126731
96 299.568549388411 290.9481217760681
123 340.22927703837166 336.2481292040823
145 346.8857744341717 344.6395424657584
156 286.6673885102476 286.14290412034615
198 356.7598069552424 356.6406881858769
206 290.7961147382348 287.7848414600997
221 334.58145640489084 332.0587476372641
256 293.87406589610487 288.8286987714627
276 335.11013255299133 327.94088237222974
286 365.98709733071735 363.8506324066037
344 261.34132252638864 260.4915331910129
371 340.5752969660168 331.1700778720556
387 287.1831915928839 285.07386477542616
398 235.59104966588455 234.65326084420576
409 249.86759858307363 248.04139956595657
415 311.64325611503136 308.1858651187004
429 261.53091516718666 258.6173072488693
439 222.86157587338238 222.6507649311162
459 364.5565424423104 361.90388443428037
490 264.4912856290498 261.71949263870306
493 260.5538877462898 258.09738896207426
500 303.93370289829085 301.7784772746566
521 328.40652744972056 325.1471911246654
534 270.55499683952485 262.8765814456561
559 284.5409383189639 284.4576989487712
597 262.7307622808917 261.76455042024475
616 294.48101247906 293.7097400287074
624 272.48164255568383 272.4023171039881
632 327.9430572104446 326.65891791265227
639 297.93813828041493 296.29174153364784
669 240.9650629308417 235.58153988589646
696 282.4785037971899 272.13228654207893
706 295.71733980150555 288.42996271097644
738 342.0701095540589 336.5234823031274
750 303.1849659436578 302.2472534820181
813 321.6812805592891 320.164855879225
818 345.21130535743526 342.2483534921651
851 287.90429490048587 284.8707732242757
854 290.29617040964075 289.45742535092995
882 318.2767402974797 311.1554507033743
912 313.65944634992496 311.3200178676698
934 320.27192092218456 316.8141049552831


10,100
equilateral triangle 41
7 286.64136674627196 285.79431772165015
131 291.17866704458606 289.42499579525105
202 313.2915723564795 312.0490566152368
221 334.58145640489084 332.0587476372641
266 294.8879060910108 294.6720874556819
276 335.11013255299133 327.94088237222974
298 313.1987012073181 312.3791089689623
344 261.34132252638864 260.4915331910129
375 299.02015920876 298.4902219039611
387 287.1831915928839 285.07386477542616
389 288.2770528218491 279.08412771945814
398 235.59104966588455 234.65326084420576
418 252.89393144215484 247.57956026365525
461 291.4213690110162 288.4225599184746
462 357.1387585054394 356.3090413071312
490 263.61202548159014 261.71949263870306
493 260.5538877462898 258.09738896207426
496 299.77089441665174 292.63646498226393
521 326.72740970035636 325.1471911246654
537 289.872734914508 288.06960470727836
546 346.3390640417719 340.4280508776882
559 284.5409383189639 284.4576989487712
597 262.7307622808917 261.76455042024475
624 272.48164255568383 272.4023171039881
639 297.93813828041493 296.29174153364784
649 303.66418917072815 303.538636925639
686 309.9078805829844 307.8383140065721
706 295.71733980150555 288.42996271097644
710 296.94713435189504 296.5461792588777
727 346.86582939776633 346.594467135895
735 285.7318844358556 283.0780021558651
738 342.0701095540589 336.5234823031274
784 246.81126856471877 246.43524831030237
798 307.8681845105307 304.0908441868289
817 268.80740947883277 268.00098419328697
818 345.21130535743526 342.2483534921651
851 287.90429490048587 284.8707732242757
904 356.2083695464562 354.19571257139177
912 313.65944634992496 311.3200178676698
934 320.27192092218456 316.8141049552831
972 297.5058534541853 292.5330153304242

10,100
min dist 9/1000 0,03765
202 313.2915723564795 312.0490566152368
298 313.1987012073181 312.3791089689623
344 261.34132252638864 260.4915331910129
387 287.1831915928839 285.07386477542616
398 235.59104966588455 234.65326084420576
490 263.61202548159014 261.71949263870306
559 284.5409383189639 284.4576989487712
710 296.94713435189504 296.5461792588777
912 313.65944634992496 311.3200178676698


10,100
delt = (l0 + l1 + l2) / lx
delt = abs(1 - delt)
dist += delt
8/1000 0,0094
298 313.1987012073181 312.3791089689623
344 261.34132252638864 260.4915331910129
387 287.1831915928839 285.07386477542616
398 235.59104966588455 234.65326084420576
490 263.61202548159014 261.71949263870306
559 284.5409383189639 284.4576989487712
710 296.94713435189504 296.5461792588777
912 313.65944634992496 311.3200178676698


10,100 1000/12 0,03173
l0 = distance_mat[first][second]
l1 = distance_mat[first][other]
l2 = distance_mat[second][other]
lx = float(min(l0, l1, l2))
delt = (l0 * l1 * l2) / lx ** 3
delt = abs(1 / delt)
dist = dist + delt
32 339.40743887043675 331.2759045392635
202 313.2915723564795 312.0490566152368
344 261.34132252638864 260.4915331910129
387 287.1831915928839 285.07386477542616
398 235.59104966588455 234.65326084420576
418 252.89393144215484 247.57956026365525
490 263.61202548159014 261.71949263870306
559 284.5409383189639 284.4576989487712
710 296.94713435189504 296.5461792588777
912 313.65944634992496 311.3200178676698
934 320.27192092218456 316.8141049552831
972 297.5058534541853 292.5330153304242




l0 = distance_mat[first][second]
l1 = distance_mat[first][other]
l2 = distance_mat[second][other]
lx = float(min(l0, l1, l2))
delt = (l0 * l1 * l2) / lx ** 3
delt = abs(1 / delt)
dist = dist + delt
if dist_1 < dist_2:

10,100 1000/9 0,010675
202 313.2915723564795 312.0490566152368
298 313.1987012073181 312.3791089689623
344 261.34132252638864 260.4915331910129
387 287.1831915928839 285.07386477542616
398 235.59104966588455 234.65326084420576
490 263.61202548159014 261.71949263870306
559 284.5409383189639 284.4576989487712
710 296.94713435189504 296.5461792588777
912 313.65944634992496 311.3200178676698
'''




number_of_points = 10
space_size = 100
seed = 0


# bm(number_of_points, space_size, seed, True)
# tm(number_of_points, space_size, seed, True)

def control_all(start, end):
    tot = []
    for i in range(start, end):
        bm_sol = bm(number_of_points, space_size, i, False)
        ma_sol = tm(number_of_points, space_size, i, False)
        # print(bm_sol, ma_sol)
        if round(ma_sol, 5) != round(bm_sol, 5):
            print(i, ma_sol, bm_sol)
            delt = abs(ma_sol - bm_sol)
            tot.append(delt)
        if i % 10 == 0 and i != 0:
            print('10 controled')
    print(sum(tot) / 1000)

control_all(0, 1000)
